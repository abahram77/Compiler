Program	eof void int		no	yes
DeclarationList1	void int	eof continue break ; oAcl if while return switch id + minus ( num cAcl	yes	no
Declaration	void int	void int eof continue break ; oAcl if while return switch id + minus ( num cAcl	no	no
FTypeSpecifier2	id	void int eof continue break ; oAcl if while return switch id + minus ( num cAcl	no	no
Var4	( ; oBrac	void int eof continue break ; oAcl if while return switch id + minus ( num cAcl	no	no
Var1	; oBrac	void int eof continue break ; oAcl if while return switch id + minus ( num cAcl	no	no
Params	int void	)	no	no
FParam	id	)	yes	no
ParamList1	comma	)	yes	no
Param	void int	comma )	no	no
TypeSpecifier	void int	id	no	no
FTypeSpecifier1	id	comma )	no	no
Var2	oBrac	comma )	yes	no
DeclarationList	void int	eof continue break ; oAcl if while return switch id + minus ( num cAcl	yes	no
StatementList1	continue break ; oAcl if while return switch id + minus ( num	case default cAcl	yes	no
CompoundStmt	oAcl	case default else void int eof continue break ; oAcl if while return switch id + minus ( num cAcl	no	no
ExpressionStmt	continue break ; id + minus ( num	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
SelectionStmt	if	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
IterationStmt	while	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
Statement	continue break ; oAcl if while return switch id + minus ( num	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
ReturnStmt	return	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
Freturn	; id + minus ( num	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
SwitchStmt	switch	case default continue break ; oAcl if while return switch id + minus ( num else cAcl	no	no
CaseStmts	case	default cAcl	yes	no
CaseStmts1	case	default cAcl	yes	no
CaseStmt	case	case default cAcl	no	no
DefaultStmt	default	cAcl	yes	no
StatementList	continue break ; oAcl if while return switch id + minus ( num	case default cAcl	yes	no
FExpr	( oBrac equal * + minus lt ~	; cBrac ) comma	yes	no
FExpr1	equal * + minus lt ~	; cBrac ) comma	yes	no
FAdditiveExpression	lt ~	; cBrac ) comma	yes	no
Relop	lt ~	+ minus ( id num	no	no
AdditiveExpression	+ minus ( id num	; cBrac ) comma	no	no
AdditiveExpression1	+ minus	lt ~ ; cBrac ) comma	yes	no
Addop	+ minus	+ minus ( id num	no	no
Term	+ minus ( id num	+ minus lt ~ ; cBrac ) comma	no	no
Term2	+ minus ( num	+ minus lt ~ ; cBrac ) comma	no	no
Term1	*	+ minus lt ~ ; cBrac ) comma	yes	no
SignedFactor	+ minus ( id num	* + minus lt ~ ; cBrac ) comma	no	no
SignedFactor2	+ minus ( num	* + minus lt ~ ; cBrac ) comma	no	no
Factor	( id num	* + minus lt ~ ; cBrac ) comma	no	no
Factor2	( num	* + minus lt ~ ; cBrac ) comma	no	no
Var3	( oBrac	* + minus lt ~ ; cBrac ) comma	yes	no
Var	oBrac	equal * + minus lt ~ ; cBrac ) comma	yes	no
Args	id + minus ( num	)	yes	no
ArgList	id + minus ( num	)	no	no
Expression	id + minus ( num	; cBrac ) comma	no	no
ArgList1	comma	)	yes	no